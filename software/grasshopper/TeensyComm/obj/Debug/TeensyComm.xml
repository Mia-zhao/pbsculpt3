<?xml version="1.0"?>
<doc>
<assembly>
<name>
TeensyComm
</name>
</assembly>
<members>
<member name="T:TeensyComm.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:TeensyComm.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:TeensyComm.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="T:TeensyComm.Parsing.MessageType">
 <summary>
 Q = query, R = response
 </summary>
 <remarks></remarks>
</member>
<member name="M:TeensyComm.Parsing.Reading.ListFromBytes(System.Byte[],System.Int32)">
 <summary>
 Creates a list of messages from bytes
 </summary>
 <param name="Bytes">Buffer bytes</param>
 <param name="Skip">Set the number of bytes to skip betweem the messages</param>
 <returns></returns>
</member>
<member name="M:TeensyComm.Parsing.Reading.FromBytes(System.Byte[],TeensyComm.TMessage@,System.Int64)">
 <summary>
 Parses Bytes to a TMessage, returns the length of the message
 </summary>
 <param name="Bytes"></param>
 <param name="Tm"></param>
 <param name="At"></param>
 <returns></returns>
</member>
<member name="M:TeensyComm.Parsing.Writing.MsgToBytes(TeensyComm.TMessage)">
 <summary>
 Creates an array of bytes from a TMessage
 </summary>
 <param name="Tm"></param>
 <returns></returns>
</member>
<member name="T:TeensyComm.Communicators.SerialComm">
 <summary>
 Performs reading and writing of TMessages over SerialPort
 </summary>
</member>
<member name="E:TeensyComm.Communicators.SerialComm.MessageReceived">
 <summary>
 TeensyEventArgs holds all the messages which arrived since last timer tick
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="E:TeensyComm.Communicators.SerialComm.IncorrectMessageReceived">
 <summary>
 That's intended to indicate a device which is sending SOME messages, but they're not recognized as Teensy Messaged by the parser
 </summary> 
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:TeensyComm.Communicators.SerialComm.#ctor(System.String,System.Int32,System.Int32)">
 <summary>
 Default and only constructor
 </summary>
 <param name="COMName">COM port to communicate with</param>
 <param name="Interval">Time interval at which the current message stack is accessible via MessageReceived event</param>
 <param name="Timeout">Timeout value</param>
</member>
<member name="M:TeensyComm.Communicators.SerialComm.Start">
 <summary>
 Start communication
 </summary>
</member>
<member name="M:TeensyComm.Communicators.SerialComm.Close">
 <summary>
 Close communication and dispose stuff
 </summary>
</member>
<member name="M:TeensyComm.Communicators.SerialComm.Send(TeensyComm.TMessage)">
 <summary>
 Puts messages to send in the stack
 </summary>
 <param name="Message"></param>
</member>
<member name="T:TeensyComm.Communicators.TeensyEventArgs">
 <summary>
 Contains messages received as well as name of the sender
 </summary>
</member>
<member name="T:TeensyComm.Communicators.UdpComm">
 <summary>
 Performs reading of TMessages over UDP
 </summary>
</member>
<member name="E:TeensyComm.Communicators.UdpComm.MessageReceived">
 <summary>
 TeensyEventArgs holds all the messages which arrived since last timer tick
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="E:TeensyComm.Communicators.UdpComm.IncorrectMessageReceived">
 <summary>
 That's intended to indicate a device which is sending SOME messages, but they're not recognized as Teensy Messaged by the parser
 </summary> 
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:TeensyComm.Communicators.UdpComm.Start">
 <summary>
 Start communication
 </summary>
</member>
<member name="M:TeensyComm.Communicators.UdpComm.Close">
 <summary>
 Close communication and dispose stuff
 </summary>
</member>
<member name="T:TeensyComm.TMessage">
 <summary>
 Teensy message class (yes, T stands for Teensy)
 </summary>
</member>
<member name="P:TeensyComm.TMessage.OriginID">
 <summary>
 Unique identifier of the message origin (Teensy node, Python listener, Grasshopper listener)
 </summary>
 <returns></returns>
</member>
<member name="P:TeensyComm.TMessage.DestinationID">
 <summary>
 Unique identifier of the message destination (Teensy node, Python listener, Grasshopper listener)
 </summary>
 <returns></returns>
</member>
<member name="P:TeensyComm.TMessage.MessageType">
 <summary>
 Same as cmdNum in the protocol documentation
 </summary>
 <returns></returns>
</member>
<member name="P:TeensyComm.TMessage.Time">
 <summary>
 This property is only for internal .NET use - doesn't have any influence on the way the message is parsed to bytes.
 </summary>
 <returns></returns>
</member>
<member name="P:TeensyComm.TMessage.Size">
 <summary>
 
 </summary>
 <returns></returns>
</member>
<member name="P:TeensyComm.TMessage.Data">
 <summary>
 When listening, values are always converted to a list of integers (cause integers can store bytes, int16, sbyte etc.)
 </summary>
 <returns></returns>
</member>
</members>
</doc>
